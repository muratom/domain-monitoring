// Package inspector provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package inspector

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
	. "github.com/muratom/domain-monitoring/api/rpc/v1/inspector/models"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add domain
	// (POST /v1/add-domain)
	AddDomain(ctx echo.Context, params AddDomainParams) error
	// Get all stored domains FQDN
	// (GET /v1/all-domains)
	GetAllDomains(ctx echo.Context) error
	// Get domain's changelog
	// (GET /v1/changelog)
	GetChangelog(ctx echo.Context, params GetChangelogParams) error
	// Delete domain
	// (POST /v1/delete-domain)
	DeleteDomain(ctx echo.Context, params DeleteDomainParams) error
	// Get domain
	// (GET /v1/domain)
	GetDomain(ctx echo.Context, params GetDomainParams) error
	// Health check
	// (GET /v1/ping)
	Ping(ctx echo.Context) error
	// Update domain
	// (POST /v1/update-domain)
	UpdateDomain(ctx echo.Context, params UpdateDomainParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AddDomain converts echo context to params.
func (w *ServerInterfaceWrapper) AddDomain(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AddDomainParams
	// ------------- Required query parameter "fqdn" -------------

	err = runtime.BindQueryParameter("form", true, true, "fqdn", ctx.QueryParams(), &params.Fqdn)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fqdn: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddDomain(ctx, params)
	return err
}

// GetAllDomains converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllDomains(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllDomains(ctx)
	return err
}

// GetChangelog converts echo context to params.
func (w *ServerInterfaceWrapper) GetChangelog(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetChangelogParams
	// ------------- Required query parameter "fqdn" -------------

	err = runtime.BindQueryParameter("form", true, true, "fqdn", ctx.QueryParams(), &params.Fqdn)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fqdn: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetChangelog(ctx, params)
	return err
}

// DeleteDomain converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteDomain(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteDomainParams
	// ------------- Required query parameter "fqdn" -------------

	err = runtime.BindQueryParameter("form", true, true, "fqdn", ctx.QueryParams(), &params.Fqdn)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fqdn: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteDomain(ctx, params)
	return err
}

// GetDomain converts echo context to params.
func (w *ServerInterfaceWrapper) GetDomain(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDomainParams
	// ------------- Required query parameter "fqdn" -------------

	err = runtime.BindQueryParameter("form", true, true, "fqdn", ctx.QueryParams(), &params.Fqdn)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fqdn: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDomain(ctx, params)
	return err
}

// Ping converts echo context to params.
func (w *ServerInterfaceWrapper) Ping(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Ping(ctx)
	return err
}

// UpdateDomain converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateDomain(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateDomainParams
	// ------------- Required query parameter "fqdn" -------------

	err = runtime.BindQueryParameter("form", true, true, "fqdn", ctx.QueryParams(), &params.Fqdn)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fqdn: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateDomain(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v1/add-domain", wrapper.AddDomain)
	router.GET(baseURL+"/v1/all-domains", wrapper.GetAllDomains)
	router.GET(baseURL+"/v1/changelog", wrapper.GetChangelog)
	router.POST(baseURL+"/v1/delete-domain", wrapper.DeleteDomain)
	router.GET(baseURL+"/v1/domain", wrapper.GetDomain)
	router.GET(baseURL+"/v1/ping", wrapper.Ping)
	router.POST(baseURL+"/v1/update-domain", wrapper.UpdateDomain)

}
