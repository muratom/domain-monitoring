version: '3.8'
services:
  inspector:
    container_name: "inspector"
    build:
      context: ../services/inspector
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - '8000:8000'
    healthcheck:
      test: ["CMD", "healthcheck -port 8000"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    depends_on:
      - db
      - emitter_1
      - emitter_2
  emitter_1:
    container_name: "emitter_1"
    build:
      context: ../services/emitter
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - '8080:8080'
      - '8090:8090'
  emitter_2:
    container_name: "emitter_2"
    build:
      context: ../services/emitter
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - '8010:8080'
      - '8020:8090'
  db:
    image: postgres:15.2
    environment:
      POSTGRES_DB: "domain"
      POSTGRES_USER: "user"
      POSTGRES_PASSWORD: "root"
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - postgres:/var/lib/postgresql/data
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d domain"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
  
    # cache:
  #   image: redis:6.2.11-alpine
  #   restart: always
  #   ports:
  #     - '6379:6379'
  #   command: redis-server --save 60 1 --loglevel verbose --requirepass abracadabra
  #   volumes:
  #     - cache:/data
volumes:
  postgres:
  