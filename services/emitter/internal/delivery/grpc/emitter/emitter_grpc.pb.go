// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: emitter/emitter.proto

package emitter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EmitterService_GetDNS_FullMethodName   = "/emitter.EmitterService/GetDNS"
	EmitterService_GetWhois_FullMethodName = "/emitter.EmitterService/GetWhois"
)

// EmitterServiceClient is the client API for EmitterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmitterServiceClient interface {
	GetDNS(ctx context.Context, in *GetDNSRequest, opts ...grpc.CallOption) (*ResourceRecords, error)
	GetWhois(ctx context.Context, in *GetWhoisRequest, opts ...grpc.CallOption) (*WhoisRecord, error)
}

type emitterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmitterServiceClient(cc grpc.ClientConnInterface) EmitterServiceClient {
	return &emitterServiceClient{cc}
}

func (c *emitterServiceClient) GetDNS(ctx context.Context, in *GetDNSRequest, opts ...grpc.CallOption) (*ResourceRecords, error) {
	out := new(ResourceRecords)
	err := c.cc.Invoke(ctx, EmitterService_GetDNS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emitterServiceClient) GetWhois(ctx context.Context, in *GetWhoisRequest, opts ...grpc.CallOption) (*WhoisRecord, error) {
	out := new(WhoisRecord)
	err := c.cc.Invoke(ctx, EmitterService_GetWhois_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmitterServiceServer is the server API for EmitterService service.
// All implementations must embed UnimplementedEmitterServiceServer
// for forward compatibility
type EmitterServiceServer interface {
	GetDNS(context.Context, *GetDNSRequest) (*ResourceRecords, error)
	GetWhois(context.Context, *GetWhoisRequest) (*WhoisRecord, error)
	mustEmbedUnimplementedEmitterServiceServer()
}

// UnimplementedEmitterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmitterServiceServer struct {
}

func (UnimplementedEmitterServiceServer) GetDNS(context.Context, *GetDNSRequest) (*ResourceRecords, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDNS not implemented")
}
func (UnimplementedEmitterServiceServer) GetWhois(context.Context, *GetWhoisRequest) (*WhoisRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWhois not implemented")
}
func (UnimplementedEmitterServiceServer) mustEmbedUnimplementedEmitterServiceServer() {}

// UnsafeEmitterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmitterServiceServer will
// result in compilation errors.
type UnsafeEmitterServiceServer interface {
	mustEmbedUnimplementedEmitterServiceServer()
}

func RegisterEmitterServiceServer(s grpc.ServiceRegistrar, srv EmitterServiceServer) {
	s.RegisterService(&EmitterService_ServiceDesc, srv)
}

func _EmitterService_GetDNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDNSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitterServiceServer).GetDNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmitterService_GetDNS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitterServiceServer).GetDNS(ctx, req.(*GetDNSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmitterService_GetWhois_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWhoisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmitterServiceServer).GetWhois(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmitterService_GetWhois_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmitterServiceServer).GetWhois(ctx, req.(*GetWhoisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmitterService_ServiceDesc is the grpc.ServiceDesc for EmitterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmitterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emitter.EmitterService",
	HandlerType: (*EmitterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDNS",
			Handler:    _EmitterService_GetDNS_Handler,
		},
		{
			MethodName: "GetWhois",
			Handler:    _EmitterService_GetWhois_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emitter/emitter.proto",
}
