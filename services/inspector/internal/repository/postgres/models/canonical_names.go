// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CanonicalName is an object representing the database table.
type CanonicalName struct {
	ID            int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	DomainID      int    `boil:"domain_id" json:"domain_id" toml:"domain_id" yaml:"domain_id"`
	CanonicalName string `boil:"canonical_name" json:"canonical_name" toml:"canonical_name" yaml:"canonical_name"`

	R *canonicalNameR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L canonicalNameL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CanonicalNameColumns = struct {
	ID            string
	DomainID      string
	CanonicalName string
}{
	ID:            "id",
	DomainID:      "domain_id",
	CanonicalName: "canonical_name",
}

var CanonicalNameTableColumns = struct {
	ID            string
	DomainID      string
	CanonicalName string
}{
	ID:            "canonical_names.id",
	DomainID:      "canonical_names.domain_id",
	CanonicalName: "canonical_names.canonical_name",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var CanonicalNameWhere = struct {
	ID            whereHelperint
	DomainID      whereHelperint
	CanonicalName whereHelperstring
}{
	ID:            whereHelperint{field: "\"canonical_names\".\"id\""},
	DomainID:      whereHelperint{field: "\"canonical_names\".\"domain_id\""},
	CanonicalName: whereHelperstring{field: "\"canonical_names\".\"canonical_name\""},
}

// CanonicalNameRels is where relationship names are stored.
var CanonicalNameRels = struct {
	Domain string
}{
	Domain: "Domain",
}

// canonicalNameR is where relationships are stored.
type canonicalNameR struct {
	Domain *Domain `boil:"Domain" json:"Domain" toml:"Domain" yaml:"Domain"`
}

// NewStruct creates a new relationship struct
func (*canonicalNameR) NewStruct() *canonicalNameR {
	return &canonicalNameR{}
}

func (r *canonicalNameR) GetDomain() *Domain {
	if r == nil {
		return nil
	}
	return r.Domain
}

// canonicalNameL is where Load methods for each relationship are stored.
type canonicalNameL struct{}

var (
	canonicalNameAllColumns            = []string{"id", "domain_id", "canonical_name"}
	canonicalNameColumnsWithoutDefault = []string{"domain_id", "canonical_name"}
	canonicalNameColumnsWithDefault    = []string{"id"}
	canonicalNamePrimaryKeyColumns     = []string{"domain_id", "canonical_name"}
	canonicalNameGeneratedColumns      = []string{"id"}
)

type (
	// CanonicalNameSlice is an alias for a slice of pointers to CanonicalName.
	// This should almost always be used instead of []CanonicalName.
	CanonicalNameSlice []*CanonicalName

	canonicalNameQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	canonicalNameType                 = reflect.TypeOf(&CanonicalName{})
	canonicalNameMapping              = queries.MakeStructMapping(canonicalNameType)
	canonicalNamePrimaryKeyMapping, _ = queries.BindMapping(canonicalNameType, canonicalNameMapping, canonicalNamePrimaryKeyColumns)
	canonicalNameInsertCacheMut       sync.RWMutex
	canonicalNameInsertCache          = make(map[string]insertCache)
	canonicalNameUpdateCacheMut       sync.RWMutex
	canonicalNameUpdateCache          = make(map[string]updateCache)
	canonicalNameUpsertCacheMut       sync.RWMutex
	canonicalNameUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single canonicalName record from the query.
func (q canonicalNameQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CanonicalName, error) {
	o := &CanonicalName{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for canonical_names")
	}

	return o, nil
}

// All returns all CanonicalName records from the query.
func (q canonicalNameQuery) All(ctx context.Context, exec boil.ContextExecutor) (CanonicalNameSlice, error) {
	var o []*CanonicalName

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CanonicalName slice")
	}

	return o, nil
}

// Count returns the count of all CanonicalName records in the query.
func (q canonicalNameQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count canonical_names rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q canonicalNameQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if canonical_names exists")
	}

	return count > 0, nil
}

// Domain pointed to by the foreign key.
func (o *CanonicalName) Domain(mods ...qm.QueryMod) domainQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DomainID),
	}

	queryMods = append(queryMods, mods...)

	return Domains(queryMods...)
}

// LoadDomain allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (canonicalNameL) LoadDomain(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCanonicalName interface{}, mods queries.Applicator) error {
	var slice []*CanonicalName
	var object *CanonicalName

	if singular {
		var ok bool
		object, ok = maybeCanonicalName.(*CanonicalName)
		if !ok {
			object = new(CanonicalName)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCanonicalName)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCanonicalName))
			}
		}
	} else {
		s, ok := maybeCanonicalName.(*[]*CanonicalName)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCanonicalName)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCanonicalName))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &canonicalNameR{}
		}
		args = append(args, object.DomainID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &canonicalNameR{}
			}

			for _, a := range args {
				if a == obj.DomainID {
					continue Outer
				}
			}

			args = append(args, obj.DomainID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`domains`),
		qm.WhereIn(`domains.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Domain")
	}

	var resultSlice []*Domain
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Domain")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for domains")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for domains")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Domain = foreign
		if foreign.R == nil {
			foreign.R = &domainR{}
		}
		foreign.R.CanonicalNames = append(foreign.R.CanonicalNames, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DomainID == foreign.ID {
				local.R.Domain = foreign
				if foreign.R == nil {
					foreign.R = &domainR{}
				}
				foreign.R.CanonicalNames = append(foreign.R.CanonicalNames, local)
				break
			}
		}
	}

	return nil
}

// SetDomain of the canonicalName to the related item.
// Sets o.R.Domain to related.
// Adds o to related.R.CanonicalNames.
func (o *CanonicalName) SetDomain(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Domain) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"canonical_names\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"domain_id"}),
		strmangle.WhereClause("\"", "\"", 2, canonicalNamePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.DomainID, o.CanonicalName}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DomainID = related.ID
	if o.R == nil {
		o.R = &canonicalNameR{
			Domain: related,
		}
	} else {
		o.R.Domain = related
	}

	if related.R == nil {
		related.R = &domainR{
			CanonicalNames: CanonicalNameSlice{o},
		}
	} else {
		related.R.CanonicalNames = append(related.R.CanonicalNames, o)
	}

	return nil
}

// CanonicalNames retrieves all the records using an executor.
func CanonicalNames(mods ...qm.QueryMod) canonicalNameQuery {
	mods = append(mods, qm.From("\"canonical_names\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"canonical_names\".*"})
	}

	return canonicalNameQuery{q}
}

// FindCanonicalName retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCanonicalName(ctx context.Context, exec boil.ContextExecutor, domainID int, canonicalName string, selectCols ...string) (*CanonicalName, error) {
	canonicalNameObj := &CanonicalName{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"canonical_names\" where \"domain_id\"=$1 AND \"canonical_name\"=$2", sel,
	)

	q := queries.Raw(query, domainID, canonicalName)

	err := q.Bind(ctx, exec, canonicalNameObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from canonical_names")
	}

	return canonicalNameObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CanonicalName) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no canonical_names provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(canonicalNameColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	canonicalNameInsertCacheMut.RLock()
	cache, cached := canonicalNameInsertCache[key]
	canonicalNameInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			canonicalNameAllColumns,
			canonicalNameColumnsWithDefault,
			canonicalNameColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, canonicalNameGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(canonicalNameType, canonicalNameMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(canonicalNameType, canonicalNameMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"canonical_names\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"canonical_names\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into canonical_names")
	}

	if !cached {
		canonicalNameInsertCacheMut.Lock()
		canonicalNameInsertCache[key] = cache
		canonicalNameInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the CanonicalName.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CanonicalName) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	canonicalNameUpdateCacheMut.RLock()
	cache, cached := canonicalNameUpdateCache[key]
	canonicalNameUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			canonicalNameAllColumns,
			canonicalNamePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, canonicalNameGeneratedColumns)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update canonical_names, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"canonical_names\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, canonicalNamePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(canonicalNameType, canonicalNameMapping, append(wl, canonicalNamePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update canonical_names row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for canonical_names")
	}

	if !cached {
		canonicalNameUpdateCacheMut.Lock()
		canonicalNameUpdateCache[key] = cache
		canonicalNameUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q canonicalNameQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for canonical_names")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for canonical_names")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CanonicalNameSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), canonicalNamePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"canonical_names\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, canonicalNamePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in canonicalName slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all canonicalName")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CanonicalName) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no canonical_names provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(canonicalNameColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	canonicalNameUpsertCacheMut.RLock()
	cache, cached := canonicalNameUpsertCache[key]
	canonicalNameUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			canonicalNameAllColumns,
			canonicalNameColumnsWithDefault,
			canonicalNameColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			canonicalNameAllColumns,
			canonicalNamePrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, canonicalNameGeneratedColumns)
		update = strmangle.SetComplement(update, canonicalNameGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert canonical_names, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(canonicalNamePrimaryKeyColumns))
			copy(conflict, canonicalNamePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"canonical_names\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(canonicalNameType, canonicalNameMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(canonicalNameType, canonicalNameMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert canonical_names")
	}

	if !cached {
		canonicalNameUpsertCacheMut.Lock()
		canonicalNameUpsertCache[key] = cache
		canonicalNameUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single CanonicalName record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CanonicalName) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CanonicalName provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), canonicalNamePrimaryKeyMapping)
	sql := "DELETE FROM \"canonical_names\" WHERE \"domain_id\"=$1 AND \"canonical_name\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from canonical_names")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for canonical_names")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q canonicalNameQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no canonicalNameQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from canonical_names")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for canonical_names")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CanonicalNameSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), canonicalNamePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"canonical_names\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, canonicalNamePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from canonicalName slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for canonical_names")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CanonicalName) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCanonicalName(ctx, exec, o.DomainID, o.CanonicalName)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CanonicalNameSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CanonicalNameSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), canonicalNamePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"canonical_names\".* FROM \"canonical_names\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, canonicalNamePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CanonicalNameSlice")
	}

	*o = slice

	return nil
}

// CanonicalNameExists checks if the CanonicalName row exists.
func CanonicalNameExists(ctx context.Context, exec boil.ContextExecutor, domainID int, canonicalName string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"canonical_names\" where \"domain_id\"=$1 AND \"canonical_name\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, domainID, canonicalName)
	}
	row := exec.QueryRowContext(ctx, sql, domainID, canonicalName)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if canonical_names exists")
	}

	return exists, nil
}

// Exists checks if the CanonicalName row exists.
func (o *CanonicalName) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CanonicalNameExists(ctx, exec, o.DomainID, o.CanonicalName)
}
