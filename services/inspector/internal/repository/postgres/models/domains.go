// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Domain is an object representing the database table.
type Domain struct {
	ID          int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	FQDN        string    `boil:"fqdn" json:"fqdn" toml:"fqdn" yaml:"fqdn"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdateDelay string    `boil:"update_delay" json:"update_delay" toml:"update_delay" yaml:"update_delay"`

	R *domainR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L domainL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DomainColumns = struct {
	ID          string
	FQDN        string
	UpdatedAt   string
	UpdateDelay string
}{
	ID:          "id",
	FQDN:        "fqdn",
	UpdatedAt:   "updated_at",
	UpdateDelay: "update_delay",
}

var DomainTableColumns = struct {
	ID          string
	FQDN        string
	UpdatedAt   string
	UpdateDelay string
}{
	ID:          "domains.id",
	FQDN:        "domains.fqdn",
	UpdatedAt:   "domains.updated_at",
	UpdateDelay: "domains.update_delay",
}

// Generated where

var DomainWhere = struct {
	ID          whereHelperint
	FQDN        whereHelperstring
	UpdatedAt   whereHelpertime_Time
	UpdateDelay whereHelperstring
}{
	ID:          whereHelperint{field: "\"domains\".\"id\""},
	FQDN:        whereHelperstring{field: "\"domains\".\"fqdn\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"domains\".\"updated_at\""},
	UpdateDelay: whereHelperstring{field: "\"domains\".\"update_delay\""},
}

// DomainRels is where relationship names are stored.
var DomainRels = struct {
	CanonicalNames   string
	Changelogs       string
	Ipv4Addresses    string
	Ipv6Addresses    string
	MailExchangers   string
	NameServers      string
	Registrations    string
	ServerSelections string
	TextStrings      string
}{
	CanonicalNames:   "CanonicalNames",
	Changelogs:       "Changelogs",
	Ipv4Addresses:    "Ipv4Addresses",
	Ipv6Addresses:    "Ipv6Addresses",
	MailExchangers:   "MailExchangers",
	NameServers:      "NameServers",
	Registrations:    "Registrations",
	ServerSelections: "ServerSelections",
	TextStrings:      "TextStrings",
}

// domainR is where relationships are stored.
type domainR struct {
	CanonicalNames   CanonicalNameSlice   `boil:"CanonicalNames" json:"CanonicalNames" toml:"CanonicalNames" yaml:"CanonicalNames"`
	Changelogs       ChangelogSlice       `boil:"Changelogs" json:"Changelogs" toml:"Changelogs" yaml:"Changelogs"`
	Ipv4Addresses    Ipv4AddressSlice     `boil:"Ipv4Addresses" json:"Ipv4Addresses" toml:"Ipv4Addresses" yaml:"Ipv4Addresses"`
	Ipv6Addresses    Ipv6AddressSlice     `boil:"Ipv6Addresses" json:"Ipv6Addresses" toml:"Ipv6Addresses" yaml:"Ipv6Addresses"`
	MailExchangers   MailExchangerSlice   `boil:"MailExchangers" json:"MailExchangers" toml:"MailExchangers" yaml:"MailExchangers"`
	NameServers      NameServerSlice      `boil:"NameServers" json:"NameServers" toml:"NameServers" yaml:"NameServers"`
	Registrations    RegistrationSlice    `boil:"Registrations" json:"Registrations" toml:"Registrations" yaml:"Registrations"`
	ServerSelections ServerSelectionSlice `boil:"ServerSelections" json:"ServerSelections" toml:"ServerSelections" yaml:"ServerSelections"`
	TextStrings      TextStringSlice      `boil:"TextStrings" json:"TextStrings" toml:"TextStrings" yaml:"TextStrings"`
}

// NewStruct creates a new relationship struct
func (*domainR) NewStruct() *domainR {
	return &domainR{}
}

func (r *domainR) GetCanonicalNames() CanonicalNameSlice {
	if r == nil {
		return nil
	}
	return r.CanonicalNames
}

func (r *domainR) GetChangelogs() ChangelogSlice {
	if r == nil {
		return nil
	}
	return r.Changelogs
}

func (r *domainR) GetIpv4Addresses() Ipv4AddressSlice {
	if r == nil {
		return nil
	}
	return r.Ipv4Addresses
}

func (r *domainR) GetIpv6Addresses() Ipv6AddressSlice {
	if r == nil {
		return nil
	}
	return r.Ipv6Addresses
}

func (r *domainR) GetMailExchangers() MailExchangerSlice {
	if r == nil {
		return nil
	}
	return r.MailExchangers
}

func (r *domainR) GetNameServers() NameServerSlice {
	if r == nil {
		return nil
	}
	return r.NameServers
}

func (r *domainR) GetRegistrations() RegistrationSlice {
	if r == nil {
		return nil
	}
	return r.Registrations
}

func (r *domainR) GetServerSelections() ServerSelectionSlice {
	if r == nil {
		return nil
	}
	return r.ServerSelections
}

func (r *domainR) GetTextStrings() TextStringSlice {
	if r == nil {
		return nil
	}
	return r.TextStrings
}

// domainL is where Load methods for each relationship are stored.
type domainL struct{}

var (
	domainAllColumns            = []string{"id", "fqdn", "updated_at", "update_delay"}
	domainColumnsWithoutDefault = []string{"fqdn", "updated_at", "update_delay"}
	domainColumnsWithDefault    = []string{"id"}
	domainPrimaryKeyColumns     = []string{"id"}
	domainGeneratedColumns      = []string{"id"}
)

type (
	// DomainSlice is an alias for a slice of pointers to Domain.
	// This should almost always be used instead of []Domain.
	DomainSlice []*Domain

	domainQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	domainType                 = reflect.TypeOf(&Domain{})
	domainMapping              = queries.MakeStructMapping(domainType)
	domainPrimaryKeyMapping, _ = queries.BindMapping(domainType, domainMapping, domainPrimaryKeyColumns)
	domainInsertCacheMut       sync.RWMutex
	domainInsertCache          = make(map[string]insertCache)
	domainUpdateCacheMut       sync.RWMutex
	domainUpdateCache          = make(map[string]updateCache)
	domainUpsertCacheMut       sync.RWMutex
	domainUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single domain record from the query.
func (q domainQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Domain, error) {
	o := &Domain{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for domains")
	}

	return o, nil
}

// All returns all Domain records from the query.
func (q domainQuery) All(ctx context.Context, exec boil.ContextExecutor) (DomainSlice, error) {
	var o []*Domain

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Domain slice")
	}

	return o, nil
}

// Count returns the count of all Domain records in the query.
func (q domainQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count domains rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q domainQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if domains exists")
	}

	return count > 0, nil
}

// CanonicalNames retrieves all the canonical_name's CanonicalNames with an executor.
func (o *Domain) CanonicalNames(mods ...qm.QueryMod) canonicalNameQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"canonical_names\".\"domain_id\"=?", o.ID),
	)

	return CanonicalNames(queryMods...)
}

// Changelogs retrieves all the changelog's Changelogs with an executor.
func (o *Domain) Changelogs(mods ...qm.QueryMod) changelogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"changelogs\".\"domain_id\"=?", o.ID),
	)

	return Changelogs(queryMods...)
}

// Ipv4Addresses retrieves all the ipv4_address's Ipv4Addresses with an executor.
func (o *Domain) Ipv4Addresses(mods ...qm.QueryMod) ipv4AddressQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"ipv4_addresses\".\"domain_id\"=?", o.ID),
	)

	return Ipv4Addresses(queryMods...)
}

// Ipv6Addresses retrieves all the ipv6_address's Ipv6Addresses with an executor.
func (o *Domain) Ipv6Addresses(mods ...qm.QueryMod) ipv6AddressQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"ipv6_addresses\".\"domain_id\"=?", o.ID),
	)

	return Ipv6Addresses(queryMods...)
}

// MailExchangers retrieves all the mail_exchanger's MailExchangers with an executor.
func (o *Domain) MailExchangers(mods ...qm.QueryMod) mailExchangerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"mail_exchangers\".\"domain_id\"=?", o.ID),
	)

	return MailExchangers(queryMods...)
}

// NameServers retrieves all the name_server's NameServers with an executor.
func (o *Domain) NameServers(mods ...qm.QueryMod) nameServerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"name_servers\".\"domain_id\"=?", o.ID),
	)

	return NameServers(queryMods...)
}

// Registrations retrieves all the registration's Registrations with an executor.
func (o *Domain) Registrations(mods ...qm.QueryMod) registrationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"registrations\".\"domain_id\"=?", o.ID),
	)

	return Registrations(queryMods...)
}

// ServerSelections retrieves all the server_selection's ServerSelections with an executor.
func (o *Domain) ServerSelections(mods ...qm.QueryMod) serverSelectionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"server_selections\".\"domain_id\"=?", o.ID),
	)

	return ServerSelections(queryMods...)
}

// TextStrings retrieves all the text_string's TextStrings with an executor.
func (o *Domain) TextStrings(mods ...qm.QueryMod) textStringQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"text_strings\".\"domain_id\"=?", o.ID),
	)

	return TextStrings(queryMods...)
}

// LoadCanonicalNames allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (domainL) LoadCanonicalNames(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomain interface{}, mods queries.Applicator) error {
	var slice []*Domain
	var object *Domain

	if singular {
		var ok bool
		object, ok = maybeDomain.(*Domain)
		if !ok {
			object = new(Domain)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDomain)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDomain))
			}
		}
	} else {
		s, ok := maybeDomain.(*[]*Domain)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDomain)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDomain))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &domainR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &domainR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`canonical_names`),
		qm.WhereIn(`canonical_names.domain_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load canonical_names")
	}

	var resultSlice []*CanonicalName
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice canonical_names")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on canonical_names")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for canonical_names")
	}

	if singular {
		object.R.CanonicalNames = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &canonicalNameR{}
			}
			foreign.R.Domain = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DomainID {
				local.R.CanonicalNames = append(local.R.CanonicalNames, foreign)
				if foreign.R == nil {
					foreign.R = &canonicalNameR{}
				}
				foreign.R.Domain = local
				break
			}
		}
	}

	return nil
}

// LoadChangelogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (domainL) LoadChangelogs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomain interface{}, mods queries.Applicator) error {
	var slice []*Domain
	var object *Domain

	if singular {
		var ok bool
		object, ok = maybeDomain.(*Domain)
		if !ok {
			object = new(Domain)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDomain)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDomain))
			}
		}
	} else {
		s, ok := maybeDomain.(*[]*Domain)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDomain)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDomain))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &domainR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &domainR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`changelogs`),
		qm.WhereIn(`changelogs.domain_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load changelogs")
	}

	var resultSlice []*Changelog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice changelogs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on changelogs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for changelogs")
	}

	if singular {
		object.R.Changelogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &changelogR{}
			}
			foreign.R.Domain = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DomainID {
				local.R.Changelogs = append(local.R.Changelogs, foreign)
				if foreign.R == nil {
					foreign.R = &changelogR{}
				}
				foreign.R.Domain = local
				break
			}
		}
	}

	return nil
}

// LoadIpv4Addresses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (domainL) LoadIpv4Addresses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomain interface{}, mods queries.Applicator) error {
	var slice []*Domain
	var object *Domain

	if singular {
		var ok bool
		object, ok = maybeDomain.(*Domain)
		if !ok {
			object = new(Domain)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDomain)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDomain))
			}
		}
	} else {
		s, ok := maybeDomain.(*[]*Domain)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDomain)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDomain))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &domainR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &domainR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`ipv4_addresses`),
		qm.WhereIn(`ipv4_addresses.domain_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ipv4_addresses")
	}

	var resultSlice []*Ipv4Address
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ipv4_addresses")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on ipv4_addresses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ipv4_addresses")
	}

	if singular {
		object.R.Ipv4Addresses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &ipv4AddressR{}
			}
			foreign.R.Domain = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DomainID {
				local.R.Ipv4Addresses = append(local.R.Ipv4Addresses, foreign)
				if foreign.R == nil {
					foreign.R = &ipv4AddressR{}
				}
				foreign.R.Domain = local
				break
			}
		}
	}

	return nil
}

// LoadIpv6Addresses allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (domainL) LoadIpv6Addresses(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomain interface{}, mods queries.Applicator) error {
	var slice []*Domain
	var object *Domain

	if singular {
		var ok bool
		object, ok = maybeDomain.(*Domain)
		if !ok {
			object = new(Domain)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDomain)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDomain))
			}
		}
	} else {
		s, ok := maybeDomain.(*[]*Domain)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDomain)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDomain))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &domainR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &domainR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`ipv6_addresses`),
		qm.WhereIn(`ipv6_addresses.domain_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ipv6_addresses")
	}

	var resultSlice []*Ipv6Address
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ipv6_addresses")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on ipv6_addresses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ipv6_addresses")
	}

	if singular {
		object.R.Ipv6Addresses = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &ipv6AddressR{}
			}
			foreign.R.Domain = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DomainID {
				local.R.Ipv6Addresses = append(local.R.Ipv6Addresses, foreign)
				if foreign.R == nil {
					foreign.R = &ipv6AddressR{}
				}
				foreign.R.Domain = local
				break
			}
		}
	}

	return nil
}

// LoadMailExchangers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (domainL) LoadMailExchangers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomain interface{}, mods queries.Applicator) error {
	var slice []*Domain
	var object *Domain

	if singular {
		var ok bool
		object, ok = maybeDomain.(*Domain)
		if !ok {
			object = new(Domain)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDomain)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDomain))
			}
		}
	} else {
		s, ok := maybeDomain.(*[]*Domain)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDomain)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDomain))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &domainR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &domainR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`mail_exchangers`),
		qm.WhereIn(`mail_exchangers.domain_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load mail_exchangers")
	}

	var resultSlice []*MailExchanger
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice mail_exchangers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on mail_exchangers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for mail_exchangers")
	}

	if singular {
		object.R.MailExchangers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &mailExchangerR{}
			}
			foreign.R.Domain = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DomainID {
				local.R.MailExchangers = append(local.R.MailExchangers, foreign)
				if foreign.R == nil {
					foreign.R = &mailExchangerR{}
				}
				foreign.R.Domain = local
				break
			}
		}
	}

	return nil
}

// LoadNameServers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (domainL) LoadNameServers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomain interface{}, mods queries.Applicator) error {
	var slice []*Domain
	var object *Domain

	if singular {
		var ok bool
		object, ok = maybeDomain.(*Domain)
		if !ok {
			object = new(Domain)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDomain)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDomain))
			}
		}
	} else {
		s, ok := maybeDomain.(*[]*Domain)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDomain)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDomain))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &domainR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &domainR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`name_servers`),
		qm.WhereIn(`name_servers.domain_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load name_servers")
	}

	var resultSlice []*NameServer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice name_servers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on name_servers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for name_servers")
	}

	if singular {
		object.R.NameServers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &nameServerR{}
			}
			foreign.R.Domain = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DomainID {
				local.R.NameServers = append(local.R.NameServers, foreign)
				if foreign.R == nil {
					foreign.R = &nameServerR{}
				}
				foreign.R.Domain = local
				break
			}
		}
	}

	return nil
}

// LoadRegistrations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (domainL) LoadRegistrations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomain interface{}, mods queries.Applicator) error {
	var slice []*Domain
	var object *Domain

	if singular {
		var ok bool
		object, ok = maybeDomain.(*Domain)
		if !ok {
			object = new(Domain)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDomain)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDomain))
			}
		}
	} else {
		s, ok := maybeDomain.(*[]*Domain)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDomain)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDomain))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &domainR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &domainR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`registrations`),
		qm.WhereIn(`registrations.domain_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load registrations")
	}

	var resultSlice []*Registration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice registrations")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on registrations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for registrations")
	}

	if singular {
		object.R.Registrations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &registrationR{}
			}
			foreign.R.Domain = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DomainID {
				local.R.Registrations = append(local.R.Registrations, foreign)
				if foreign.R == nil {
					foreign.R = &registrationR{}
				}
				foreign.R.Domain = local
				break
			}
		}
	}

	return nil
}

// LoadServerSelections allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (domainL) LoadServerSelections(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomain interface{}, mods queries.Applicator) error {
	var slice []*Domain
	var object *Domain

	if singular {
		var ok bool
		object, ok = maybeDomain.(*Domain)
		if !ok {
			object = new(Domain)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDomain)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDomain))
			}
		}
	} else {
		s, ok := maybeDomain.(*[]*Domain)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDomain)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDomain))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &domainR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &domainR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`server_selections`),
		qm.WhereIn(`server_selections.domain_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load server_selections")
	}

	var resultSlice []*ServerSelection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice server_selections")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on server_selections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for server_selections")
	}

	if singular {
		object.R.ServerSelections = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &serverSelectionR{}
			}
			foreign.R.Domain = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DomainID {
				local.R.ServerSelections = append(local.R.ServerSelections, foreign)
				if foreign.R == nil {
					foreign.R = &serverSelectionR{}
				}
				foreign.R.Domain = local
				break
			}
		}
	}

	return nil
}

// LoadTextStrings allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (domainL) LoadTextStrings(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDomain interface{}, mods queries.Applicator) error {
	var slice []*Domain
	var object *Domain

	if singular {
		var ok bool
		object, ok = maybeDomain.(*Domain)
		if !ok {
			object = new(Domain)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDomain)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDomain))
			}
		}
	} else {
		s, ok := maybeDomain.(*[]*Domain)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDomain)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDomain))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &domainR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &domainR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`text_strings`),
		qm.WhereIn(`text_strings.domain_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load text_strings")
	}

	var resultSlice []*TextString
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice text_strings")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on text_strings")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for text_strings")
	}

	if singular {
		object.R.TextStrings = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &textStringR{}
			}
			foreign.R.Domain = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DomainID {
				local.R.TextStrings = append(local.R.TextStrings, foreign)
				if foreign.R == nil {
					foreign.R = &textStringR{}
				}
				foreign.R.Domain = local
				break
			}
		}
	}

	return nil
}

// AddCanonicalNames adds the given related objects to the existing relationships
// of the domain, optionally inserting them as new records.
// Appends related to o.R.CanonicalNames.
// Sets related.R.Domain appropriately.
func (o *Domain) AddCanonicalNames(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CanonicalName) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DomainID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"canonical_names\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"domain_id"}),
				strmangle.WhereClause("\"", "\"", 2, canonicalNamePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DomainID = o.ID
		}
	}

	if o.R == nil {
		o.R = &domainR{
			CanonicalNames: related,
		}
	} else {
		o.R.CanonicalNames = append(o.R.CanonicalNames, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &canonicalNameR{
				Domain: o,
			}
		} else {
			rel.R.Domain = o
		}
	}
	return nil
}

// AddChangelogs adds the given related objects to the existing relationships
// of the domain, optionally inserting them as new records.
// Appends related to o.R.Changelogs.
// Sets related.R.Domain appropriately.
func (o *Domain) AddChangelogs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Changelog) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DomainID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"changelogs\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"domain_id"}),
				strmangle.WhereClause("\"", "\"", 2, changelogPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DomainID = o.ID
		}
	}

	if o.R == nil {
		o.R = &domainR{
			Changelogs: related,
		}
	} else {
		o.R.Changelogs = append(o.R.Changelogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &changelogR{
				Domain: o,
			}
		} else {
			rel.R.Domain = o
		}
	}
	return nil
}

// AddIpv4Addresses adds the given related objects to the existing relationships
// of the domain, optionally inserting them as new records.
// Appends related to o.R.Ipv4Addresses.
// Sets related.R.Domain appropriately.
func (o *Domain) AddIpv4Addresses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Ipv4Address) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DomainID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"ipv4_addresses\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"domain_id"}),
				strmangle.WhereClause("\"", "\"", 2, ipv4AddressPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DomainID = o.ID
		}
	}

	if o.R == nil {
		o.R = &domainR{
			Ipv4Addresses: related,
		}
	} else {
		o.R.Ipv4Addresses = append(o.R.Ipv4Addresses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &ipv4AddressR{
				Domain: o,
			}
		} else {
			rel.R.Domain = o
		}
	}
	return nil
}

// AddIpv6Addresses adds the given related objects to the existing relationships
// of the domain, optionally inserting them as new records.
// Appends related to o.R.Ipv6Addresses.
// Sets related.R.Domain appropriately.
func (o *Domain) AddIpv6Addresses(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Ipv6Address) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DomainID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"ipv6_addresses\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"domain_id"}),
				strmangle.WhereClause("\"", "\"", 2, ipv6AddressPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DomainID = o.ID
		}
	}

	if o.R == nil {
		o.R = &domainR{
			Ipv6Addresses: related,
		}
	} else {
		o.R.Ipv6Addresses = append(o.R.Ipv6Addresses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &ipv6AddressR{
				Domain: o,
			}
		} else {
			rel.R.Domain = o
		}
	}
	return nil
}

// AddMailExchangers adds the given related objects to the existing relationships
// of the domain, optionally inserting them as new records.
// Appends related to o.R.MailExchangers.
// Sets related.R.Domain appropriately.
func (o *Domain) AddMailExchangers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MailExchanger) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DomainID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"mail_exchangers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"domain_id"}),
				strmangle.WhereClause("\"", "\"", 2, mailExchangerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DomainID = o.ID
		}
	}

	if o.R == nil {
		o.R = &domainR{
			MailExchangers: related,
		}
	} else {
		o.R.MailExchangers = append(o.R.MailExchangers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &mailExchangerR{
				Domain: o,
			}
		} else {
			rel.R.Domain = o
		}
	}
	return nil
}

// AddNameServers adds the given related objects to the existing relationships
// of the domain, optionally inserting them as new records.
// Appends related to o.R.NameServers.
// Sets related.R.Domain appropriately.
func (o *Domain) AddNameServers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*NameServer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DomainID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"name_servers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"domain_id"}),
				strmangle.WhereClause("\"", "\"", 2, nameServerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DomainID = o.ID
		}
	}

	if o.R == nil {
		o.R = &domainR{
			NameServers: related,
		}
	} else {
		o.R.NameServers = append(o.R.NameServers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &nameServerR{
				Domain: o,
			}
		} else {
			rel.R.Domain = o
		}
	}
	return nil
}

// AddRegistrations adds the given related objects to the existing relationships
// of the domain, optionally inserting them as new records.
// Appends related to o.R.Registrations.
// Sets related.R.Domain appropriately.
func (o *Domain) AddRegistrations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Registration) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DomainID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"registrations\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"domain_id"}),
				strmangle.WhereClause("\"", "\"", 2, registrationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DomainID = o.ID
		}
	}

	if o.R == nil {
		o.R = &domainR{
			Registrations: related,
		}
	} else {
		o.R.Registrations = append(o.R.Registrations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &registrationR{
				Domain: o,
			}
		} else {
			rel.R.Domain = o
		}
	}
	return nil
}

// AddServerSelections adds the given related objects to the existing relationships
// of the domain, optionally inserting them as new records.
// Appends related to o.R.ServerSelections.
// Sets related.R.Domain appropriately.
func (o *Domain) AddServerSelections(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ServerSelection) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DomainID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"server_selections\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"domain_id"}),
				strmangle.WhereClause("\"", "\"", 2, serverSelectionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DomainID = o.ID
		}
	}

	if o.R == nil {
		o.R = &domainR{
			ServerSelections: related,
		}
	} else {
		o.R.ServerSelections = append(o.R.ServerSelections, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &serverSelectionR{
				Domain: o,
			}
		} else {
			rel.R.Domain = o
		}
	}
	return nil
}

// AddTextStrings adds the given related objects to the existing relationships
// of the domain, optionally inserting them as new records.
// Appends related to o.R.TextStrings.
// Sets related.R.Domain appropriately.
func (o *Domain) AddTextStrings(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TextString) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DomainID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"text_strings\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"domain_id"}),
				strmangle.WhereClause("\"", "\"", 2, textStringPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DomainID = o.ID
		}
	}

	if o.R == nil {
		o.R = &domainR{
			TextStrings: related,
		}
	} else {
		o.R.TextStrings = append(o.R.TextStrings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &textStringR{
				Domain: o,
			}
		} else {
			rel.R.Domain = o
		}
	}
	return nil
}

// Domains retrieves all the records using an executor.
func Domains(mods ...qm.QueryMod) domainQuery {
	mods = append(mods, qm.From("\"domains\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"domains\".*"})
	}

	return domainQuery{q}
}

// FindDomain retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDomain(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Domain, error) {
	domainObj := &Domain{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"domains\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, domainObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from domains")
	}

	return domainObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Domain) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no domains provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(domainColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	domainInsertCacheMut.RLock()
	cache, cached := domainInsertCache[key]
	domainInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			domainAllColumns,
			domainColumnsWithDefault,
			domainColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, domainGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(domainType, domainMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(domainType, domainMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"domains\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"domains\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into domains")
	}

	if !cached {
		domainInsertCacheMut.Lock()
		domainInsertCache[key] = cache
		domainInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Domain.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Domain) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	domainUpdateCacheMut.RLock()
	cache, cached := domainUpdateCache[key]
	domainUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			domainAllColumns,
			domainPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, domainGeneratedColumns)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update domains, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"domains\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, domainPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(domainType, domainMapping, append(wl, domainPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update domains row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for domains")
	}

	if !cached {
		domainUpdateCacheMut.Lock()
		domainUpdateCache[key] = cache
		domainUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q domainQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for domains")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for domains")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DomainSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), domainPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"domains\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, domainPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in domain slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all domain")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Domain) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no domains provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(domainColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	domainUpsertCacheMut.RLock()
	cache, cached := domainUpsertCache[key]
	domainUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			domainAllColumns,
			domainColumnsWithDefault,
			domainColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			domainAllColumns,
			domainPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, domainGeneratedColumns)
		update = strmangle.SetComplement(update, domainGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert domains, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(domainPrimaryKeyColumns))
			copy(conflict, domainPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"domains\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(domainType, domainMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(domainType, domainMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert domains")
	}

	if !cached {
		domainUpsertCacheMut.Lock()
		domainUpsertCache[key] = cache
		domainUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Domain record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Domain) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Domain provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), domainPrimaryKeyMapping)
	sql := "DELETE FROM \"domains\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from domains")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for domains")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q domainQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no domainQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from domains")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for domains")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DomainSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), domainPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"domains\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, domainPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from domain slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for domains")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Domain) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDomain(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DomainSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DomainSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), domainPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"domains\".* FROM \"domains\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, domainPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DomainSlice")
	}

	*o = slice

	return nil
}

// DomainExists checks if the Domain row exists.
func DomainExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"domains\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if domains exists")
	}

	return exists, nil
}

// Exists checks if the Domain row exists.
func (o *Domain) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DomainExists(ctx, exec, o.ID)
}
