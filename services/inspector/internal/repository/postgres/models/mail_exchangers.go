// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MailExchanger is an object representing the database table.
type MailExchanger struct {
	ID       int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	DomainID int    `boil:"domain_id" json:"domain_id" toml:"domain_id" yaml:"domain_id"`
	Host     string `boil:"host" json:"host" toml:"host" yaml:"host"`
	Pref     int    `boil:"pref" json:"pref" toml:"pref" yaml:"pref"`

	R *mailExchangerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L mailExchangerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MailExchangerColumns = struct {
	ID       string
	DomainID string
	Host     string
	Pref     string
}{
	ID:       "id",
	DomainID: "domain_id",
	Host:     "host",
	Pref:     "pref",
}

var MailExchangerTableColumns = struct {
	ID       string
	DomainID string
	Host     string
	Pref     string
}{
	ID:       "mail_exchangers.id",
	DomainID: "mail_exchangers.domain_id",
	Host:     "mail_exchangers.host",
	Pref:     "mail_exchangers.pref",
}

// Generated where

var MailExchangerWhere = struct {
	ID       whereHelperint
	DomainID whereHelperint
	Host     whereHelperstring
	Pref     whereHelperint
}{
	ID:       whereHelperint{field: "\"mail_exchangers\".\"id\""},
	DomainID: whereHelperint{field: "\"mail_exchangers\".\"domain_id\""},
	Host:     whereHelperstring{field: "\"mail_exchangers\".\"host\""},
	Pref:     whereHelperint{field: "\"mail_exchangers\".\"pref\""},
}

// MailExchangerRels is where relationship names are stored.
var MailExchangerRels = struct {
	Domain string
}{
	Domain: "Domain",
}

// mailExchangerR is where relationships are stored.
type mailExchangerR struct {
	Domain *Domain `boil:"Domain" json:"Domain" toml:"Domain" yaml:"Domain"`
}

// NewStruct creates a new relationship struct
func (*mailExchangerR) NewStruct() *mailExchangerR {
	return &mailExchangerR{}
}

func (r *mailExchangerR) GetDomain() *Domain {
	if r == nil {
		return nil
	}
	return r.Domain
}

// mailExchangerL is where Load methods for each relationship are stored.
type mailExchangerL struct{}

var (
	mailExchangerAllColumns            = []string{"id", "domain_id", "host", "pref"}
	mailExchangerColumnsWithoutDefault = []string{"domain_id", "host", "pref"}
	mailExchangerColumnsWithDefault    = []string{"id"}
	mailExchangerPrimaryKeyColumns     = []string{"id"}
	mailExchangerGeneratedColumns      = []string{"id"}
)

type (
	// MailExchangerSlice is an alias for a slice of pointers to MailExchanger.
	// This should almost always be used instead of []MailExchanger.
	MailExchangerSlice []*MailExchanger
	// MailExchangerHook is the signature for custom MailExchanger hook methods
	MailExchangerHook func(context.Context, boil.ContextExecutor, *MailExchanger) error

	mailExchangerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	mailExchangerType                 = reflect.TypeOf(&MailExchanger{})
	mailExchangerMapping              = queries.MakeStructMapping(mailExchangerType)
	mailExchangerPrimaryKeyMapping, _ = queries.BindMapping(mailExchangerType, mailExchangerMapping, mailExchangerPrimaryKeyColumns)
	mailExchangerInsertCacheMut       sync.RWMutex
	mailExchangerInsertCache          = make(map[string]insertCache)
	mailExchangerUpdateCacheMut       sync.RWMutex
	mailExchangerUpdateCache          = make(map[string]updateCache)
	mailExchangerUpsertCacheMut       sync.RWMutex
	mailExchangerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var mailExchangerAfterSelectHooks []MailExchangerHook

var mailExchangerBeforeInsertHooks []MailExchangerHook
var mailExchangerAfterInsertHooks []MailExchangerHook

var mailExchangerBeforeUpdateHooks []MailExchangerHook
var mailExchangerAfterUpdateHooks []MailExchangerHook

var mailExchangerBeforeDeleteHooks []MailExchangerHook
var mailExchangerAfterDeleteHooks []MailExchangerHook

var mailExchangerBeforeUpsertHooks []MailExchangerHook
var mailExchangerAfterUpsertHooks []MailExchangerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MailExchanger) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailExchangerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MailExchanger) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailExchangerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MailExchanger) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailExchangerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MailExchanger) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailExchangerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MailExchanger) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailExchangerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MailExchanger) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailExchangerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MailExchanger) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailExchangerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MailExchanger) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailExchangerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MailExchanger) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range mailExchangerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMailExchangerHook registers your hook function for all future operations.
func AddMailExchangerHook(hookPoint boil.HookPoint, mailExchangerHook MailExchangerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		mailExchangerAfterSelectHooks = append(mailExchangerAfterSelectHooks, mailExchangerHook)
	case boil.BeforeInsertHook:
		mailExchangerBeforeInsertHooks = append(mailExchangerBeforeInsertHooks, mailExchangerHook)
	case boil.AfterInsertHook:
		mailExchangerAfterInsertHooks = append(mailExchangerAfterInsertHooks, mailExchangerHook)
	case boil.BeforeUpdateHook:
		mailExchangerBeforeUpdateHooks = append(mailExchangerBeforeUpdateHooks, mailExchangerHook)
	case boil.AfterUpdateHook:
		mailExchangerAfterUpdateHooks = append(mailExchangerAfterUpdateHooks, mailExchangerHook)
	case boil.BeforeDeleteHook:
		mailExchangerBeforeDeleteHooks = append(mailExchangerBeforeDeleteHooks, mailExchangerHook)
	case boil.AfterDeleteHook:
		mailExchangerAfterDeleteHooks = append(mailExchangerAfterDeleteHooks, mailExchangerHook)
	case boil.BeforeUpsertHook:
		mailExchangerBeforeUpsertHooks = append(mailExchangerBeforeUpsertHooks, mailExchangerHook)
	case boil.AfterUpsertHook:
		mailExchangerAfterUpsertHooks = append(mailExchangerAfterUpsertHooks, mailExchangerHook)
	}
}

// One returns a single mailExchanger record from the query.
func (q mailExchangerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MailExchanger, error) {
	o := &MailExchanger{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for mail_exchangers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MailExchanger records from the query.
func (q mailExchangerQuery) All(ctx context.Context, exec boil.ContextExecutor) (MailExchangerSlice, error) {
	var o []*MailExchanger

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MailExchanger slice")
	}

	if len(mailExchangerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MailExchanger records in the query.
func (q mailExchangerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count mail_exchangers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q mailExchangerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if mail_exchangers exists")
	}

	return count > 0, nil
}

// Domain pointed to by the foreign key.
func (o *MailExchanger) Domain(mods ...qm.QueryMod) domainQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DomainID),
	}

	queryMods = append(queryMods, mods...)

	return Domains(queryMods...)
}

// LoadDomain allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (mailExchangerL) LoadDomain(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMailExchanger interface{}, mods queries.Applicator) error {
	var slice []*MailExchanger
	var object *MailExchanger

	if singular {
		var ok bool
		object, ok = maybeMailExchanger.(*MailExchanger)
		if !ok {
			object = new(MailExchanger)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMailExchanger)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMailExchanger))
			}
		}
	} else {
		s, ok := maybeMailExchanger.(*[]*MailExchanger)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMailExchanger)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMailExchanger))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &mailExchangerR{}
		}
		args = append(args, object.DomainID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &mailExchangerR{}
			}

			for _, a := range args {
				if a == obj.DomainID {
					continue Outer
				}
			}

			args = append(args, obj.DomainID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`domains`),
		qm.WhereIn(`domains.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Domain")
	}

	var resultSlice []*Domain
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Domain")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for domains")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for domains")
	}

	if len(domainAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Domain = foreign
		if foreign.R == nil {
			foreign.R = &domainR{}
		}
		foreign.R.MailExchangers = append(foreign.R.MailExchangers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DomainID == foreign.ID {
				local.R.Domain = foreign
				if foreign.R == nil {
					foreign.R = &domainR{}
				}
				foreign.R.MailExchangers = append(foreign.R.MailExchangers, local)
				break
			}
		}
	}

	return nil
}

// SetDomain of the mailExchanger to the related item.
// Sets o.R.Domain to related.
// Adds o to related.R.MailExchangers.
func (o *MailExchanger) SetDomain(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Domain) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"mail_exchangers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"domain_id"}),
		strmangle.WhereClause("\"", "\"", 2, mailExchangerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DomainID = related.ID
	if o.R == nil {
		o.R = &mailExchangerR{
			Domain: related,
		}
	} else {
		o.R.Domain = related
	}

	if related.R == nil {
		related.R = &domainR{
			MailExchangers: MailExchangerSlice{o},
		}
	} else {
		related.R.MailExchangers = append(related.R.MailExchangers, o)
	}

	return nil
}

// MailExchangers retrieves all the records using an executor.
func MailExchangers(mods ...qm.QueryMod) mailExchangerQuery {
	mods = append(mods, qm.From("\"mail_exchangers\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"mail_exchangers\".*"})
	}

	return mailExchangerQuery{q}
}

// FindMailExchanger retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMailExchanger(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*MailExchanger, error) {
	mailExchangerObj := &MailExchanger{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"mail_exchangers\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, mailExchangerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from mail_exchangers")
	}

	if err = mailExchangerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return mailExchangerObj, err
	}

	return mailExchangerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MailExchanger) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mail_exchangers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mailExchangerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	mailExchangerInsertCacheMut.RLock()
	cache, cached := mailExchangerInsertCache[key]
	mailExchangerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			mailExchangerAllColumns,
			mailExchangerColumnsWithDefault,
			mailExchangerColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, mailExchangerGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(mailExchangerType, mailExchangerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(mailExchangerType, mailExchangerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"mail_exchangers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"mail_exchangers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into mail_exchangers")
	}

	if !cached {
		mailExchangerInsertCacheMut.Lock()
		mailExchangerInsertCache[key] = cache
		mailExchangerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MailExchanger.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MailExchanger) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	mailExchangerUpdateCacheMut.RLock()
	cache, cached := mailExchangerUpdateCache[key]
	mailExchangerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			mailExchangerAllColumns,
			mailExchangerPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, mailExchangerGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update mail_exchangers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"mail_exchangers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, mailExchangerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(mailExchangerType, mailExchangerMapping, append(wl, mailExchangerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update mail_exchangers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for mail_exchangers")
	}

	if !cached {
		mailExchangerUpdateCacheMut.Lock()
		mailExchangerUpdateCache[key] = cache
		mailExchangerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q mailExchangerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for mail_exchangers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for mail_exchangers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MailExchangerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mailExchangerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"mail_exchangers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, mailExchangerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in mailExchanger slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all mailExchanger")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MailExchanger) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no mail_exchangers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(mailExchangerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	mailExchangerUpsertCacheMut.RLock()
	cache, cached := mailExchangerUpsertCache[key]
	mailExchangerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			mailExchangerAllColumns,
			mailExchangerColumnsWithDefault,
			mailExchangerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			mailExchangerAllColumns,
			mailExchangerPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, mailExchangerGeneratedColumns)
		update = strmangle.SetComplement(update, mailExchangerGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert mail_exchangers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(mailExchangerPrimaryKeyColumns))
			copy(conflict, mailExchangerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"mail_exchangers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(mailExchangerType, mailExchangerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(mailExchangerType, mailExchangerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert mail_exchangers")
	}

	if !cached {
		mailExchangerUpsertCacheMut.Lock()
		mailExchangerUpsertCache[key] = cache
		mailExchangerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MailExchanger record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MailExchanger) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MailExchanger provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), mailExchangerPrimaryKeyMapping)
	sql := "DELETE FROM \"mail_exchangers\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from mail_exchangers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for mail_exchangers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q mailExchangerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no mailExchangerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mail_exchangers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mail_exchangers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MailExchangerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(mailExchangerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mailExchangerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"mail_exchangers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mailExchangerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from mailExchanger slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for mail_exchangers")
	}

	if len(mailExchangerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MailExchanger) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMailExchanger(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MailExchangerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MailExchangerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), mailExchangerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"mail_exchangers\".* FROM \"mail_exchangers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, mailExchangerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MailExchangerSlice")
	}

	*o = slice

	return nil
}

// MailExchangerExists checks if the MailExchanger row exists.
func MailExchangerExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"mail_exchangers\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if mail_exchangers exists")
	}

	return exists, nil
}

// Exists checks if the MailExchanger row exists.
func (o *MailExchanger) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MailExchangerExists(ctx, exec, o.ID)
}
